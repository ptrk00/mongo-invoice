// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('invoices');

// total revenue generated over a period for given client
db.invoices.aggregate([
    {
        $match: {
            issuerId: 'client_id1',
            issueDate: {
                $gte: ISODate("2023-01-01T00:00:00Z"),
                $lt: ISODate("2023-12-31T23:59:59Z")
            },
            status: "paid"
        }
    },
    {
        $group: {
            _id: null,
            totalRevenue: { $sum: "$total" }
        }
    },
    {
        $project: {
            _id: 0,
            totalRevenue: 1
        }
    }
]);

// total payments received by each payment processor
db.invoices.aggregate([
    { $unwind: "$payments" },
    {
        $lookup: {
            from: "paymentProcessors",
            localField: "payments.processorId",
            foreignField: "_id",
            as: "processorDetails"
        }
    },
    { $unwind: "$processorDetails" },
    {
        $group: {
            _id: "$processorDetails.name",
            totalPayments: { $sum: "$payments.amount" },
            paymentCount: { $sum: 1 }
        }
    },
    {
        $sort: { totalPayments: -1 }
    }
]);

// average payment time for each client
// can replace issuerId to recipientId
db.invoices.aggregate([
    {
        $match: {
            status: "paid"
        }
    },
    {
        $project: {
            issuerId: 1,
            paymentTime: {
                $dateDiff: {
                    startDate: "$issueDate",
                    endDate: "$paidDate",
                    unit: "day"
                }
            }
        }
    },
    {
        $group: {
            _id: "$issuerId",
            averagePaymentTime: { $avg: "$paymentTime" }
        }
    },
    {
        $lookup: {
            from: "clients",
            localField: "_id",
            foreignField: "_id",
            as: "clientDetails"
        }
    },
    { $unwind: "$clientDetails" },
    {
        $project: {
            _id: 0,
            clientId: "$clientDetails._id",
            clientName: "$clientDetails.name",
            averagePaymentTime: 1
        }
    },
    {
        $sort: { averagePaymentTime: 1 }
    }
]);

// monthly revenue breakdown
db.invoices.aggregate([
    {
        $match: {
            issueDate: {
                $gte: ISODate("2023-01-01T00:00:00Z"),
                $lt: ISODate("2024-01-01T00:00:00Z")
            },
            status: "paid"
        }
    },
    {
        $group: {
            _id: {
                year: { $year: "$issueDate" },
                month: { $month: "$issueDate" }
            },
            monthlyRevenue: { $sum: "$total" }
        }
    },
    {
        $sort: {
            "_id.year": 1,
            "_id.month": 1
        }
    }
]);

// overdue invoices by client
db.invoices.aggregate([
    {
        $match: {
            status: "unpaid",
            dueDate: { $lt: new Date() }
        }
    },
    {
        $lookup: {
            from: "clients",
            localField: "recipientId",
            foreignField: "_id",
            as: "clientDetails"
        }
    },
    { $unwind: "$clientDetails" },
    {
        $group: {
            _id: "$clientDetails._id",
            clientName: { $first: "$clientDetails.name" },
            overdueInvoices: {
                $push: {
                    invoiceNumber: "$invoiceNumber",
                    issueDate: "$issueDate",
                    dueDate: "$dueDate",
                    total: "$total"
                }
            },
            totalOverdueAmount: { $sum: "$total" }
        }
    },
    {
        $sort: { totalOverdueAmount: -1 }
    }
]);

// tax collected by jurdistriction
db.invoices.aggregate([
    { $unwind: "$tax" },
    {
        $group: {
            _id: {
                country: "$tax.jurisdiction.country",
                state: "$tax.jurisdiction.state",
                city: "$tax.jurisdiction.city"
            },
            totalTaxCollected: { $sum: "$tax.taxAmount" }
        }
    },
    {
        $project: {
            _id: 0,
            jurisdiction: "$_id",
            totalTaxCollected: 1
        }
    },
    {
        $sort: { totalTaxCollected: -1 }
    }
]);

// invoices processed by each issuer
db.invoices.aggregate([
    {
        $group: {
            _id: "$issuerId",
            totalInvoices: { $sum: 1 }
        }
    },
    {
        $lookup: {
            from: "clients",
            localField: "_id",
            foreignField: "_id",
            as: "issuerDetails"
        }
    },
    { $unwind: "$issuerDetails" },
    {
        $project: {
            _id: 0,
            issuerId: "$issuerDetails._id",
            issuerName: "$issuerDetails.name",
            totalInvoices: 1
        }
    },
    {
        $sort: { totalInvoices: -1 }
    }
]);

use('invoices');
db.invoices.aggregate([
    {$match: {status: "paid"}}, 
    {$project: {issuerId: 1, paymentTime: 
        {$dateDiff: {startDate: "$issueDate", endDate: "$paidDate", unit: "day"}
    }}},
        {
        $group: {
            _id: "$issuerId",
            averagePaymentTime: { $avg: "$paymentTime" }
        }
    }
    ])